/*
 * What API
 * This is what-api
 *
 * OpenAPI spec version: 1.2.1
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {SongItem} from '../model/SongItem';

/**
* Users service.
* @module api/UsersApi
* @version 1.2.1
*/
export class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Search song
     * By passing in the appropriate options, you can search for available song in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id song id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {String} opts.title a phrase song's title must contain
     * @param {Array.<String>} opts.tags tags which song must contain
     * @param {String} opts.sort type of sort to use
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SongItem>} and HTTP response
     */
    searchSongWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'skip': opts['skip'],
        'limit': opts['limit'],
        'title': opts['title'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SongItem];

      return this.apiClient.callApi(
        '/song', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search song
     * By passing in the appropriate options, you can search for available song in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id song id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {String} opts.title a phrase song's title must contain
     * @param {Array.<String>} opts.tags tags which song must contain
     * @param {String} opts.sort type of sort to use
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SongItem>}
     */
    searchSong(opts) {
      return this.searchSongWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
