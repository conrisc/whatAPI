/*
 * What API
 * This is what-api
 *
 * OpenAPI spec version: 1.2.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {NoteItem} from '../model/NoteItem';
import {SongItem} from '../model/SongItem';
import {TagItem} from '../model/TagItem';

/**
* Developers service.
* @module api/DevelopersApi
* @version 1.2.0
*/
export class DevelopersApi {

    /**
    * Constructs a new DevelopersApi. 
    * @alias module:api/DevelopersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * adds a note item
     * Adds an item to the database
     * @param {Object} opts Optional parameters
     * @param {module:model/NoteItem} opts.noteItem Note item to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    addNoteWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['noteItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/note', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * adds a note item
     * Adds an item to the database
     * @param {Object} opts Optional parameters
     * @param {module:model/NoteItem} opts.noteItem Note item to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    addNote(opts) {
      return this.addNoteWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * adds a song item
     * Adds an item to the database
     * @param {Object} opts Optional parameters
     * @param {module:model/SongItem} opts.songItem Song item to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    addSongWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['songItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/song', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * adds a song item
     * Adds an item to the database
     * @param {Object} opts Optional parameters
     * @param {module:model/SongItem} opts.songItem Song item to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    addSong(opts) {
      return this.addSongWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * adds a tag item
     * Adds an item to the database
     * @param {Object} opts Optional parameters
     * @param {module:model/TagItem} opts.tagItem Tag item to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    addTagWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['tagItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/tag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * adds a tag item
     * Adds an item to the database
     * @param {Object} opts Optional parameters
     * @param {module:model/TagItem} opts.tagItem Tag item to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    addTag(opts) {
      return this.addTagWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * removes a note item
     * Removes an item from the database
     * @param {String} id note id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeNoteWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeNote");
      }


      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/note', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * removes a note item
     * Removes an item from the database
     * @param {String} id note id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeNote(id) {
      return this.removeNoteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * removes a song item
     * Removes an item from the database
     * @param {String} id song id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeSongWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeSong");
      }


      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/song', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * removes a song item
     * Removes an item from the database
     * @param {String} id song id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeSong(id) {
      return this.removeSongWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * removes a song item
     * Removes an item from the database
     * @param {String} id tag id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeTagWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTag");
      }


      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/tag', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * removes a song item
     * Removes an item from the database
     * @param {String} id tag id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeTag(id) {
      return this.removeTagWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * searches note
     * By passing in the appropriate options, you can search for available note in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id note id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NoteItem>} and HTTP response
     */
    searchNoteWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NoteItem];

      return this.apiClient.callApi(
        '/note', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * searches note
     * By passing in the appropriate options, you can search for available note in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id note id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NoteItem>}
     */
    searchNote(opts) {
      return this.searchNoteWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search song
     * By passing in the appropriate options, you can search for available song in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id song id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {Array.<String>} opts.tags tags
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SongItem>} and HTTP response
     */
    searchSongWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'skip': opts['skip'],
        'limit': opts['limit'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SongItem];

      return this.apiClient.callApi(
        '/song', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search song
     * By passing in the appropriate options, you can search for available song in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id song id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {Array.<String>} opts.tags tags
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SongItem>}
     */
    searchSong(opts) {
      return this.searchSongWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search tag
     * By passing in the appropriate options, you can search for available tag in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id tag id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TagItem>} and HTTP response
     */
    searchTagWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagItem];

      return this.apiClient.callApi(
        '/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search tag
     * By passing in the appropriate options, you can search for available tag in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id tag id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TagItem>}
     */
    searchTag(opts) {
      return this.searchTagWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updates a note item
     * Updates an item in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/NoteItem} opts.noteItem Note item to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateNoteWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['noteItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/note', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * updates a note item
     * Updates an item in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/NoteItem} opts.noteItem Note item to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateNote(opts) {
      return this.updateNoteWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updates a song item
     * Updates an item in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/SongItem} opts.songItem Note item to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateSongWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['songItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/song', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * updates a song item
     * Updates an item in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/SongItem} opts.songItem Note item to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateSong(opts) {
      return this.updateSongWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updates a tag item
     * Updates an item in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/TagItem} opts.tagItem Note item to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateTagWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['tagItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * updates a tag item
     * Updates an item in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/TagItem} opts.tagItem Note item to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateTag(opts) {
      return this.updateTagWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
