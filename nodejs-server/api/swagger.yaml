---
swagger: "2.0"
info:
  description: "This is what-api"
  version: "1.2.1"
  title: "What API"
  contact:
    email: "you@your-company.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "what-appy-server.herokuapp.com"
basePath: "/whatapi"
tags:
- name: "admins"
  description: "Secured Admin-only calls"
- name: "developers"
  description: "Operations available to regular developers"
- name: "users"
  description: "Operations available to signed in users"
schemes:
- "https"
paths:
  /note:
    get:
      tags:
      - "users"
      summary: "searches note"
      description: "By passing in the appropriate options, you can search for\navailable\
        \ note in the system\n"
      operationId: "searchNote"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "note id"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50
        minimum: 0
        format: "int32"
      responses:
        "200":
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NoteItem"
        "400":
          description: "bad input parameter"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
    post:
      tags:
      - "users"
      summary: "adds a note item"
      description: "Adds an item to the database"
      operationId: "addNote"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "NoteItem"
        description: "Note item to add"
        required: false
        schema:
          $ref: "#/definitions/NoteItem"
      responses:
        "201":
          description: "item created"
          schema:
            type: "string"
        "400":
          description: "invalid input, object invalid"
        "409":
          description: "an existing item already exists"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
    put:
      tags:
      - "users"
      summary: "updates a note item"
      description: "Updates an item in the database"
      operationId: "updateNote"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "NoteItem"
        description: "Note item to update"
        required: false
        schema:
          $ref: "#/definitions/NoteItem"
      responses:
        "200":
          description: "item updated"
        "400":
          description: "invalid input, object invalid"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
    delete:
      tags:
      - "users"
      summary: "removes a note item"
      description: "Removes an item from the database"
      operationId: "removeNote"
      parameters:
      - name: "id"
        in: "query"
        description: "note id"
        required: true
        type: "string"
      responses:
        "200":
          description: "item removed"
        "400":
          description: "invalid input, object invalid"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
  /song:
    get:
      tags:
      - "users"
      summary: "Search song"
      description: "By passing in the appropriate options, you can search for\navailable\
        \ song in the system\n"
      operationId: "searchSong"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "song id"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 300
        minimum: 0
        format: "int32"
      - name: "title"
        in: "query"
        description: "a phrase song's title must contain"
        required: false
        type: "string"
      - name: "tags"
        in: "query"
        description: "tags which song must contain"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "sort"
        in: "query"
        description: "type of sort to use"
        required: false
        type: "string"
      responses:
        "200":
          description: "search result matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SongItem"
        "400":
          description: "invalid input, object invalid"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
    post:
      tags:
      - "users"
      summary: "adds a song item"
      description: "Adds an item to the database"
      operationId: "addSong"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "SongItem"
        description: "Song item to add"
        required: false
        schema:
          $ref: "#/definitions/SongItem"
      responses:
        "201":
          description: "item created"
          schema:
            type: "string"
        "400":
          description: "invalid input, object invalid"
        "409":
          description: "an existing item already exists"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
    put:
      tags:
      - "users"
      summary: "updates a song item"
      description: "Updates an item in the database"
      operationId: "updateSong"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "SongItem"
        description: "Note item to update"
        required: false
        schema:
          $ref: "#/definitions/SongItem"
      responses:
        "200":
          description: "item updated"
          schema:
            $ref: "#/definitions/SongItem"
        "400":
          description: "invalid input, object invalid"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
    delete:
      tags:
      - "users"
      summary: "removes a song item"
      description: "Removes an item from the database"
      operationId: "removeSong"
      parameters:
      - name: "id"
        in: "query"
        description: "song id"
        required: true
        type: "string"
      responses:
        "200":
          description: "item removed"
        "400":
          description: "invalid input, object invalid"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
  /tag:
    get:
      tags:
      - "users"
      summary: "Search tag"
      description: "By passing in the appropriate options, you can search for\navailable\
        \ tag in the system\n"
      operationId: "searchTag"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "tag id"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 300
        minimum: 0
        format: "int32"
      responses:
        "200":
          description: "search result matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TagItem"
        "400":
          description: "invalid input, object invalid"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
    post:
      tags:
      - "users"
      summary: "adds a tag item"
      description: "Adds an item to the database"
      operationId: "addTag"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "TagItem"
        description: "Tag item to add"
        required: false
        schema:
          $ref: "#/definitions/TagItem"
      responses:
        "201":
          description: "item created"
          schema:
            type: "string"
        "400":
          description: "invalid input, object invalid"
        "409":
          description: "an existing item already exists"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
    put:
      tags:
      - "users"
      summary: "updates a tag item"
      description: "Updates an item in the database"
      operationId: "updateTag"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "TagItem"
        description: "Note item to update"
        required: false
        schema:
          $ref: "#/definitions/TagItem"
      responses:
        "200":
          description: "item updated"
        "400":
          description: "invalid input, object invalid"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
    delete:
      tags:
      - "users"
      summary: "removes a song item"
      description: "Removes an item from the database"
      operationId: "removeTag"
      parameters:
      - name: "id"
        in: "query"
        description: "tag id"
        required: true
        type: "string"
      responses:
        "200":
          description: "item removed"
        "400":
          description: "invalid input, object invalid"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
  /ytitems:
    get:
      tags:
      - "users"
      summary: "Get data"
      description: "By passing in url, you can fetch data\n"
      operationId: "getYtItems"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "title to search"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        default: 5
        maximum: 25
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "search result matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/YtVideoItem"
        "400":
          description: "invalid input, object invalid"
      security:
      - AuthorizationHeader: []
      x-swagger-router-controller: "Users"
  /user/register:
    post:
      tags:
      - "developers"
      summary: "register new user"
      description: "signs up new user"
      operationId: "signUpUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "userCredentials"
        description: "User's credentials"
        required: false
        schema:
          $ref: "#/definitions/User_post"
      responses:
        "201":
          description: "user created"
          schema:
            $ref: "#/definitions/SimpleResponse"
        "400":
          description: "invalid input, object invalid"
        "409":
          description: "user with given email already exists"
      x-swagger-router-controller: "Developers"
  /user/login:
    post:
      tags:
      - "developers"
      summary: "login user"
      description: "signs in user"
      operationId: "signInUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "userCredentials"
        description: "User's credentials"
        required: false
        schema:
          $ref: "#/definitions/User_post"
      responses:
        "200":
          description: "user signed in"
          schema:
            $ref: "#/definitions/SimpleResponse"
        "400":
          description: "invalid input, object invalid"
      x-swagger-router-controller: "Developers"
securityDefinitions:
  AuthorizationHeader:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  SimpleResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        example: "Request has been processed"
      data:
        type: "object"
        properties: {}
    example:
      data: "{}"
      message: "Request has been processed"
  NoteItem:
    type: "object"
    required:
    - "creationDate"
    - "text"
    properties:
      _id:
        type: "string"
        example: "4daef72846cae99923dfd6ez"
      creationDate:
        type: "string"
        example: "Wed Oct 09 2019 13:39:18 GMT+0200 (Central European Summer Time)"
      text:
        type: "string"
        example: "Some note"
    example:
      _id: "4daef72846cae99923dfd6ez"
      text: "Some note"
      creationDate: "Wed Oct 09 2019 13:39:18 GMT+0200 (Central European Summer Time)"
  User_post:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        example: "mylogin@service.com"
      password:
        type: "string"
        example: "pa$$word"
    example:
      password: "pa$$word"
      email: "mylogin@service.com"
  SongItem:
    type: "object"
    required:
    - "dateAdded"
    - "tags"
    - "title"
    - "url"
    properties:
      _id:
        type: "string"
        example: "5daef72831cae99923dad6ez"
      title:
        type: "string"
        example: "G-Eazy - Far alone"
      url:
        type: "string"
        example: "https://youtube.com/watch?v=sxV1_Lr1yf0"
      dateAdded:
        type: "string"
        example: "Wed Oct 09 2019 13:39:18 GMT+0200 (Central European Summer Time)"
      tags:
        type: "array"
        example:
        - "dance"
        - "party"
        items:
          type: "string"
    example:
      _id: "5daef72831cae99923dad6ez"
      title: "G-Eazy - Far alone"
      url: "https://youtube.com/watch?v=sxV1_Lr1yf0"
      dateAdded: "Wed Oct 09 2019 13:39:18 GMT+0200 (Central European Summer Time)"
      tags:
      - "dance"
      - "party"
  TagItem:
    type: "object"
    required:
    - "name"
    properties:
      _id:
        type: "string"
        example: "5daef72831cae99923dad6ez"
      name:
        type: "string"
        example: "Dance"
    example:
      name: "Dance"
      _id: "5daef72831cae99923dad6ez"
  YtVideoItem:
    type: "object"
    properties:
      title:
        type: "string"
        example: "LP - Muddy Waters"
      videoId:
        type: "string"
        example: "Ss8t7a8n0U4"
      thumbnailUrl:
        type: "string"
        example: "https://i.ytimg.com/vi/Ss8t7a8n0U4/default.jpg"
    example:
      videoId: "Ss8t7a8n0U4"
      title: "LP - Muddy Waters"
      thumbnailUrl: "https://i.ytimg.com/vi/Ss8t7a8n0U4/default.jpg"
